import aiofiles
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiopath import AsyncPath

from loader import db
from users.handlers import get_value_by_tgig
from utils import decorators, keyboards, queries
from utils.states import UserState

POSITION = {'mr': '–ú–µ—Ä—á–µ–Ω–¥–∞–π–∑–µ—Ä', 'kas': '–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä', 'cm': '–°–∏—Ç–∏–º–µ–Ω–µ–¥–∂–µ—Ä'}


async def profile_menu(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
                         reply_markup=keyboards.profile_menu)
    await UserState.profile_menu.set()


async def profile_menu_cm(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
                         reply_markup=keyboards.profile_menu_cm)
    await UserState.profile_menu_cm.set()


@decorators.error_handler_message
async def my_profile(message: types.Message, state: FSMContext):
    data = await get_value_by_tgig(
        value='*',
        tg_id=int(message.from_user.id))
    match data[6]:
        case 'mr':
            await message.answer(
                text=f'<b>–§–ò–û:</b> {data[1]}\n'
                     f'<b>–í–∞—à KAS:</b> {data[9]}\n'
                     f'<b>–í–∞—à CM:</b> {data[10]}\n'
                     f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[2]}\n'
                     f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[5]}\n'
                     f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[6]]}\n'
                     f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[7]}\n'
                     f'<b>–ë–∞–ª–ª—ã:</b> {data[8]}\n',
                reply_markup=keyboards.back)
        case 'kas':
            await message.answer(
                text=f'<b>–§–ò–û:</b> {data[1]}\n'
                     f'<b>–í–∞—à CM:</b> {data[10]}\n'
                     f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[2]}\n'
                     f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[5]}\n'
                     f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[6]]}\n'
                     f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[7]}\n'
                     f'<b>–ë–∞–ª–ª—ã:</b> {data[8]}\n',
                reply_markup=keyboards.back)
        case 'cm':
            await message.answer(
                text=f'<b>–§–ò–û:</b> {data[1]}\n'
                     f'<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> {data[2]}\n'
                     f'<b>–†–µ–≥–∏–æ–Ω:</b> {data[5]}\n'
                     f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {POSITION[data[6]]}\n'
                     f'<b>–£—Ä–æ–≤–µ–Ω—å:</b> {data[7]}\n'
                     f'<b>–ë–∞–ª–ª—ã:</b> {data[8]}\n',
                reply_markup=keyboards.back)


async def career(message: types.Message, state: FSMContext):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
                         reply_markup=keyboards.career_menu)


@decorators.error_handler_message
async def career_story(message: types.Message, state: FSMContext):
    path = './files/career/career_story.pdf'
    file = AsyncPath(path)
    if await file.is_file():
        await message.answer_chat_action(action='upload_document')
        async with aiofiles.open(file, 'rb') as file:
            await message.answer_document(file,
                                          reply_markup=keyboards.back)
    else:
        await message.answer(
            text='‚ùó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
            reply_markup=keyboards.back)


@decorators.error_handler_message
async def career_map(message: types.Message, state: FSMContext):
    path = './files/career/career_map.pdf'
    file = AsyncPath(path)
    if await file.is_file():
        await message.answer_chat_action(action='upload_document')
        async with aiofiles.open(file, 'rb') as file:
            await message.answer_document(file,
                                          reply_markup=keyboards.back)
    else:
        await message.answer(
            text='‚ùó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
            reply_markup=keyboards.back)


async def hr_documents(message: types.Message):
    await message.answer(
        text='–í—Å–µ –∫–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å –Ω–∞ '
             '<a href="http://infomerch.ru/">–µ–¥–∏–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ</a>',
        reply_markup=keyboards.back)


async def comments(message: types.Message):
    await message.answer(
        text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–∏—Ç–∏–ú–µ–Ω–µ–¥–∂–µ—Ä—É —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ–± '
             '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–æ–π.\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É '
             '–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.',
        reply_markup=keyboards.back)
    await UserState.profile_comments.set()


@decorators.error_handler_message
async def send_comments(message: types.Message, state: FSMContext):
    text_to_send = str(message.text)
    user = await get_value_by_tgig(
        value='username',
        tg_id=int(message.from_user.id))
    cm_tg_id = await db.get_one(
        queries.CM_TG_ID,
        int(message.from_user.id))
    if cm_tg_id[0] and int(cm_tg_id[0]) != 0:
        await message.bot.send_message(
            chat_id=cm_tg_id[0],
            text=f'<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n'
                 f'<u>–û—Ç:</u>  {user}\n'
                 f'<u>–¢–µ–º–∞:</u>  –û—Ç–∑—ã–≤ –æ–± —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ '
                 f'—Ä–∞–±–æ—Ç–æ–π/–±–æ—Ç–æ–º\n\n'
                 f'–¢–µ–∫—Å—Ç: {text_to_send}')
        await message.answer(
            text='–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–∏—Ç–∏–ú–µ–Ω–µ–¥–∂–µ—Ä—É!',
            reply_markup=keyboards.back)
    else:
        await message.answer(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à –°–∏—Ç–∏–ú–µ–Ω–µ–¥–∂–µ—Ä –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É, '
                 '–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é.',
            reply_markup=keyboards.back)


@decorators.error_handler_message
async def profile_logout(message: types.Message, state: FSMContext):
    await db.post(
        await queries.update_value(
            table='users',
            column_name='tg_id',
            where_name='tg_id'),
        value='0',
        tg_id=int(message.from_user.id))
    await message.answer(
        text='–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å!',
        reply_markup=keyboards.start)
    await state.reset_data()
    await state.finish()


def register_handlers_profile(dp: Dispatcher):
    dp.register_message_handler(
        profile_menu,
        text='–ù–∞–∑–∞–¥‚Ü©',
        state=(UserState.profile_menu,
               UserState.profile_comments))
    dp.register_message_handler(
        profile_menu_cm,
        text='–ù–∞–∑–∞–¥‚Ü©',
        state=UserState.profile_menu_cm)
    dp.register_message_handler(
        profile_menu,
        text='–ö–∞–±–∏–Ω–µ—ÇüóÑ',
        state=(UserState.auth_mr,
               UserState.auth_kas))
    dp.register_message_handler(
        profile_menu_cm,
        text='–ö–∞–±–∏–Ω–µ—ÇüóÑ',
        state=UserState.auth_cm)
    dp.register_message_handler(
        profile_logout,
        text='–í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞üö™',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        profile_logout,
        commands=['logout'],
        state='*')
    dp.register_message_handler(
        my_profile,
        text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüóÇ',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        career,
        text='–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Çüîù',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        career_story,
        text='–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞üèÜ',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        career_map,
        text='–ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞üìã',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        hr_documents,
        text='–ö–∞–¥—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ãüóÉ',
        state=(UserState.profile_menu,
               UserState.profile_menu_cm))
    dp.register_message_handler(
        comments,
        text='–û–ø—Ä–æ—Åüí¨',
        state=UserState.profile_menu)
    dp.register_message_handler(
        send_comments,
        state=UserState.profile_comments)
