import hashlib
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from typing import Union


from loader import db
from utils import decorators, keyboards, queries
from utils.states import UserState


async def get_value_by_tgig(value: str, tg_id: int)\
        -> Union[bool, tuple, str]:
    result = await db.get_one(
        await queries.get_value(
            value=value,
            table='users'),
        tg_id=tg_id)
    if result is None:
        return False
    if len(result) > 1:
        return result
    return result[0]


@decorators.error_handler_message
async def start_menu_and_state(message: types.Message, state: FSMContext):
    position = await get_value_by_tgig(
        value='position',
        tg_id=int(message.from_user.id))
    await state.reset_state()
    await state.reset_data()
    if position:
        match position:
            case 'mr':
                await message.answer(
                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                    reply_markup=keyboards.start_menu_mr)
                await UserState.auth_mr.set()
            case 'kas':
                await message.answer(
                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                    reply_markup=keyboards.start_menu_mr)
                await UserState.auth_kas.set()
            case 'cm':
                await message.answer(
                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:',
                    reply_markup=keyboards.start_menu_cm)
                await UserState.auth_cm.set()
    else:
        await message.answer(
            text='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "Action"\n'
                 '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "START"',
            reply_markup=keyboards.start)


@decorators.error_handler_message
async def start_no_auth(message: types.Message, state: FSMContext):
    auth = await get_value_by_tgig(
        value='tg_id',
        tg_id=int(message.from_user.id))
    if auth:
        await start_menu_and_state(message, state)
    else:
        await message.answer(
            text='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "Action"\n'
                 '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "START"',
            reply_markup=keyboards.start)
        await state.reset_state()
        await state.reset_data()


async def start_auth(message: types.Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–Ω–æ–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):',
                         reply_markup=keyboards.back)
    await UserState.start_auth_get_login.set()


@decorators.error_handler_message
async def login_check(message: types.Message, state: FSMContext):
    login = await db.get_one(
        await queries.get_value(
            value='ter_num',
            table='users'),
        ter_num=str(message.text))
    if login:
        await state.update_data(ter_num=str(message.text))
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:',
                             reply_markup=keyboards.back)
        await UserState.start_auth_get_password.set()
    else:
        await message.answer(
            text='–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ <b>–õ–û–ì–ò–ù–ï</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@decorators.error_handler_message
async def password_check(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pwd_hash = hashlib.sha512(str(message.text).encode(
        'utf-8')).hexdigest()
    check_password = await db.get_one(
        await queries.get_value(
            value='password',
            table='users'),
        ter_num=str(data['ter_num']),
        password=pwd_hash)
    if check_password:
        await db.post(
            await queries.update_value(
                table='users',
                column_name='tg_id',
                where_name='ter_num'),
            tg_id=int(message.from_user.id),
            ter_num=str(data['ter_num']))
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        await start_menu_and_state(message, state)
    else:
        await message.answer(
            text='–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ <b>–ü–ê–†–û–õ–ï</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


# –∫–æ–º–ø–∞–Ω—É–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def register_handlers_users(dp: Dispatcher):
    dp.register_message_handler(
        start_no_auth,
        text='–ù–∞–∑–∞–¥‚Ü©',
        state=(UserState.start_auth_get_login,
               UserState.start_auth_get_password))
    dp.register_message_handler(
        start_auth,
        text='START‚ñ∂Ô∏è')
    dp.register_message_handler(
        start_no_auth)
    dp.register_message_handler(
        login_check,
        state=UserState.start_auth_get_login)
    dp.register_message_handler(
        password_check,
        state=UserState.start_auth_get_password)
    dp.register_message_handler(
        start_menu_and_state,
        text=('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüì±',
              '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
              '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        state='*')
